@using ReactJs.Net.web.Extensions
@{
    ViewData["Title"] = "Info";
}
<div class="row">
    
    <div class="col-lg-4">
        <h2>Things to do</h2>
        <div class="panel panel-primary">
            <div class="panel-heading">Add User</div>
            <div class="panel-body">
                @using (Html.BeginForm("AddTaskUser", "Tasks", null, FormMethod.Post))
                {
                    <div class="form-group">
                        <label class="control-label">First Name</label>
                        <input type="text" name="FirstName" placeholder="First name" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Last Name</label>
                        <input type="text" name="LastName" placeholder="Last name" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Email address</label>
                        <input type="email" name="EmailAddress" placeholder="abc@def.com" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Add User</button>
                    </div>

                }
            </div>
        </div>


        <div class="panel panel-primary">
            <div class="panel-heading">Add Task</div>
            <div class="panel-body" id="addTaskForm">

            </div>
        </div>

    </div>

    <div class="col-lg-4">
        <h2>Users</h2>
        <div id="taskusers"></div>
    </div>


    <div class="col-lg-4">
        <h2>Widgets</h2>
        <div id="widget1"></div>
        <div id="widget2"></div>
    </div>
</div>



@section scripts{

    <script>
        var taskapp = {
            gettaskusers: "@Url.Action("TaskUsers")",
            addtaskurl: "@Url.Action("AddTaskForUser")",
            gettasksurk: "@Url.Action("GetTasks")",
            deletetaskuserurl: "@Url.Action("DeleteUser")",
            userUpdateInterval: 3000,
            taskUpdateInterval: 5000
        };
    </script>

    <script src="~/jsx/tasksapp.jsx"></script>
    @Html.RenderReactComponent("TaskUsersTable", "taskusers", null, "taskapp.TaskUsersTable")
    @Html.RenderReactComponent("AddTaskForm", "addTaskForm", null, "taskapp.AddTaskForm")
    @Html.RenderReactComponent("CounterWidget", "widget1", new { widgetName = "User Count"}, "taskapp.Widget1")
    @Html.RenderReactComponent("CounterWidget", "widget2", new { widgetName = "Tasks" }, "taskapp.Widget2")
    
    <script>
        
        taskapp.GetUsersFromServer = function() {
            
            $.ajax({
                    url: taskapp.gettaskusers,
                    type: "GET"
                })
                .done(function(data) {
                    taskapp.TaskUsersTable.setState({ taskUsers: data });
                    taskapp.AddTaskForm.setState({ taskUsers: data });
                    taskapp.Widget1.setState({ count: data.length });
                })
                .fail(function(e) {
                    console.log(e);
                });
            
        }

        taskapp.GetTasksFromServer = function () {

            $.ajax({
                url: taskapp.gettasksurk,
                type: "GET"
            })
                .done(function (data) {
                    taskapp.Widget2.setState({ count: data.length });
                })
                .fail(function (e) {
                    console.log(e);
                });

        }

        $(document).ready(function() {
            window.setInterval(function () { taskapp.GetUsersFromServer() }, taskapp.userUpdateInterval);
            window.setInterval(function () { taskapp.GetTasksFromServer() }, taskapp.taskUpdateInterval);
        });
    </script>
}